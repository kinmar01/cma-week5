---
title: "CMA - Exercise 5"
author: "kinmar01"
editor: visual
format: 
  html:           
    toc: true 
    toc-depth: 2
    embed-resources: true
  pdf:           
    toc: true 
    toc-depth: 2
format-links: false
number-sections: true
bibliography: bibliography.bib
output-file: index
---

exercise 5, part of the course cma (mainly based on @Laube2014)

# Abstract {.unnumbered .unlisted}

# Setup

```{r}
pacman::p_load("readr", "sf", "dplyr", "ggplot2","RColorBrewer","tidyr","lubridate","knitr")

theme_minimal() |> theme_set()
```

# **Tasks and inputs**

## **Task 1: Write your own functions**

Create the following two functions:

1.  A function which calculates a persons BMI based on their height and weight (@eq-bim) $$
    BMI = \frac{\text{Weight (kg)}}{\text{Height (m)}^2}
    $$ {#eq-bim}

```{r}
bmi <- function(weight,height) {
  weight/(height)^2
}
```

2.  A function which converts degrees Celcius to Farenheight (@eq-temp) $$
    Farenheight = Celsius * 1.8 +32
    $$ {#eq-temp}

```{r}
farenheight <- function(celsius) {
  celsius * 1.8 + 32
}
```

3.  A function which calculates the (Euclidean) distance between two sets of coordinates (x1, y1 and x2, y2) (@eq-euclidean-dist) $$
    \text{Euclidean Distance} = \sqrt{(x_2-x_1)^2+(x_2-y_1)^2}
    $$ {#eq-euclidean-dist}

```{r}
euclidean_distance <- function(x1, y1, x2, y2) {
  sqrt((x2 - x1)^2 + (y2 - y1)^2)
}
```

## **Task 2: Prepare Analysis**

In the next tasks we will look for “meet” patterns in our wild boar data. To simplify this, we will only use a subset of our wild boar data: The individuals *Rosa* and *Sabi* for the timespan *01.04.2015 - 15.04.2015*. Use the dataset `wildschwein_BE_2056.csv` (on moodle). Import the csv as a data.frame and filter it with the aforementioned criteria. You do not need to convert the data.frame to an `sf` object.

```{r}
df_wildschwein <- read_delim("data/wildschwein_BE_2056.csv") |> 
  mutate(across(where(is.character), as.factor)) |> 
  filter(
    TierName %in% c("Rosa", "Sabi"),
    DatetimeUTC |> between(
      as.POSIXct("2015-04-01 00:00:00", tz = "UTC"),
      as.POSIXct("2015-04-15 23:59:59", tz = "UTC"))
  )

df_wildschwein |> str()
df_wildschwein |> summary()
  
```

```{r}
#| label: tbl-wildschwein-t2
#| tbl-cap: "Wild boar data"

df_wildschwein |> head() |> kable()
```


## **Task 3: Create Join Key**

Have a look at your dataset. You will notice that samples are taken at every full hour, quarter past, half past and quarter to. The sampling time is usually off by a couple of seconds.

To compare Rosa and Sabi’s locations, we first need to match the two animals *temporally*. For that we can use a `join`, but need *identical* time stamps to serve as a join key. We therefore need to slightly adjust our time stamps to a common, concurrent interval.

The task is therfore to round the minutes of `DatetimeUTC` to a multiple of 15 (00, 15, 30, 45) and store the values in a new column.

```{r}

df_wildschwein_t3 <- df_wildschwein |> 
  mutate(
    DatetimeRound = DatetimeUTC |> round_date(unit = "15 minutes")
  )

```

```{r}
#| label: tbl-wildschwein-t3
#| tbl-cap: "Wild boar data with rounded datetime."

df_wildschwein_t3 |> head() |> kable()
```

# **References**

::: {#refs}
:::
